/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
    for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
    if ((from && typeof from === "object") || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
            if (!__hasOwnProp.call(to, key) && key !== except)
                __defProp(to, key, {
                    get: () => from[key],
                    enumerable:
                        !(desc = __getOwnPropDesc(from, key)) ||
                        desc.enumerable,
                });
    }
    return to;
};
var __toCommonJS = (mod) =>
    __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
    default: () => WeeklyReview,
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
    daysAgo: 7,
};

var WeeklyReview = class extends import_obsidian.Plugin {
    async onload() {
        await this.loadSettings();
        this.addCommand({
            id: "Start Review",
            name: "Start Review",
            callback: () => {
                const files = this.app.vault.getMarkdownFiles();

                let today = new Date();
                let dd = today.getDate();
                let mm = today.getMonth();
                let yyyy = today.getFullYear();

                let start_a = new Date(yyyy, mm, dd, 0, 0, 0);

                let end_a = new Date(yyyy, mm, dd, 23, 59, 59);

                let recentFiles = files
                    .filter((f) => start_a < f.stat.ctime && end_a > f.stat.ctime)
                    .sort(
                        (a, b) =>
                            (b == null ? void 0 : b.stat.ctime) -
                            (a == null ? void 0 : a.stat.ctime)
                    );
                new import_obsidian.Notice(
                    `Opening ${recentFiles.length} files created in the last ${this.settings.daysAgo} days.`
                );
                recentFiles.forEach((f) => {
                    let leaf = app.workspace.getLeaf("tab");

                    leaf.openFile(f);
                });
            },
        });
        // this.addSettingTab(new WeeklyReviewSettingTab(this.app, this));
    }
    onunload() {}
    async loadSettings() {
        this.settings = Object.assign(
            {},
            DEFAULT_SETTINGS,
            await this.loadData()
        );
    }
    async saveSettings() {
        await this.saveData(this.settings);
    }
};
var WeeklyReviewSettingTab = class extends import_obsidian.PluginSettingTab {
    constructor(app2, plugin) {
        super(app2, plugin);
        this.plugin = plugin;
    }
    display() {
        const { containerEl } = this;
        containerEl.empty();
        containerEl.createEl("h2", { text: "Settings for Weekly Review" });
        new import_obsidian.Setting(containerEl)
            .setName("How many days to show?")
            .setDesc("Typically this is 7")
            .addText((text) =>
                text
                    .setPlaceholder("Days")
                    .setValue(this.plugin.settings.daysAgo.toString())
                    .onChange(async (value) => {
                        this.plugin.settings.daysAgo = parseInt(value);
                        await this.plugin.saveSettings();
                    })
            );
    }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldywgTW9kYWwsIE5vdGljZSwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG4vLyBSZW1lbWJlciB0byByZW5hbWUgdGhlc2UgY2xhc3NlcyBhbmQgaW50ZXJmYWNlcyFcblxuaW50ZXJmYWNlIFdlZWtseVJldmlld1NldHRpbmdzIHtcblx0bXlTZXR0aW5nOiBzdHJpbmc7XG59XG5cbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IFdlZWtseVJldmlld1NldHRpbmdzID0ge1xuXHRkYXlzQWdvOiA3XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdlZWtseVJldmlldyBleHRlbmRzIFBsdWdpbiB7XG5cdHNldHRpbmdzOiBXZWVrbHlSZXZpZXdTZXR0aW5ncztcblxuXHRhc3luYyBvbmxvYWQoKSB7XG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcblxuXHRcdC8vIFRoaXMgYWRkcyBhIHNpbXBsZSBjb21tYW5kIHRoYXQgY2FuIGJlIHRyaWdnZXJlZCBhbnl3aGVyZVxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRpZDogJ1N0YXJ0IFJldmlldycsXG5cdFx0XHRuYW1lOiAnU3RhcnQgUmV2aWV3Jyxcblx0XHRcdGNhbGxiYWNrOiAoKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuXG5cdFx0XHRcdGxldCBzdGFydCA9IG1vbWVudChtb21lbnQoKS5zdGFydE9mKCdkYXknKSkuc3VidHJhY3QodGhpcy5zZXR0aW5ncy5kYXlzQWdvLCBcImRheXNcIik7XG5cdFx0XHRcdGxldCByZWNlbnRGaWxlcyA9IGZpbGVzLmZpbHRlcihmID0+IHN0YXJ0LmlzQmVmb3JlKG1vbWVudChmLnN0YXQuY3RpbWUpKSkuc29ydCgoYSwgYikgPT4gYj8uc3RhdC5jdGltZSAtIGE/LnN0YXQuY3RpbWUpO1xuXG5cdFx0XHRcdG5ldyBOb3RpY2UoYE9wZW5pbmcgJHtyZWNlbnRGaWxlcy5sZW5ndGh9IGZpbGVzIGNyZWF0ZWQgaW4gdGhlIGxhc3QgJHt0aGlzLnNldHRpbmdzLmRheXNBZ299IGRheXMuYCk7XG5cblx0XHRcdFx0cmVjZW50RmlsZXMuZm9yRWFjaCgoZikgPT4ge1xuXHRcdFx0XHRcdGxldCBsZWFmID0gYXBwLndvcmtzcGFjZS5nZXRMZWFmKCd0YWInKTtcblx0XHRcdFx0XHRsZWFmLm9wZW5GaWxlKGYpXG5cdFx0XHRcdH0pXG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQvLyBUaGlzIGFkZHMgYSBzZXR0aW5ncyB0YWIgc28gdGhlIHVzZXIgY2FuIGNvbmZpZ3VyZSB2YXJpb3VzIGFzcGVjdHMgb2YgdGhlIHBsdWdpblxuXHRcdHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgV2Vla2x5UmV2aWV3U2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xuXHR9XG5cblx0b251bmxvYWQoKSB7XG5cblx0fVxuXG5cdGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcblx0XHR0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcblx0fVxuXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuXHR9XG59XG5cbmNsYXNzIFdlZWtseVJldmlld1NldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcblx0cGx1Z2luOiBXZWVrbHlSZXZpZXc7XG5cblx0Y29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogV2Vla2x5UmV2aWV3KSB7XG5cdFx0c3VwZXIoYXBwLCBwbHVnaW4pO1xuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xuXHR9XG5cblx0ZGlzcGxheSgpOiB2b2lkIHtcblx0XHRjb25zdCB7Y29udGFpbmVyRWx9ID0gdGhpcztcblxuXHRcdGNvbnRhaW5lckVsLmVtcHR5KCk7XG5cblx0XHRjb250YWluZXJFbC5jcmVhdGVFbCgnaDInLCB7dGV4dDogJ1NldHRpbmdzIGZvciBXZWVrbHkgUmV2aWV3J30pO1xuXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZSgnSG93IG1hbnkgZGF5cyB0byBzaG93PycpXG5cdFx0XHQuc2V0RGVzYygnVHlwaWNhbGx5IHRoaXMgaXMgNycpXG5cdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKCdEYXlzJylcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmRheXNBZ28udG9TdHJpbmcoKSlcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmRheXNBZ28gPSBwYXJzZUludCh2YWx1ZSk7XG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdH0pKTtcblx0fVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUE0RjtBQVE1RixJQUFNLG1CQUF5QztBQUFBLEVBQzlDLFNBQVM7QUFDVjtBQUVBLElBQXFCLGVBQXJCLGNBQTBDLHVCQUFPO0FBQUEsRUFHaEQsTUFBTSxTQUFTO0FBQ2QsVUFBTSxLQUFLLGFBQWE7QUFHeEIsU0FBSyxXQUFXO0FBQUEsTUFDZixJQUFJO0FBQUEsTUFDSixNQUFNO0FBQUEsTUFDTixVQUFVLE1BQU07QUFDZixjQUFNLFFBQVEsS0FBSyxJQUFJLE1BQU0saUJBQWlCO0FBRTlDLFlBQUksUUFBUSxPQUFPLE9BQU8sRUFBRSxRQUFRLEtBQUssQ0FBQyxFQUFFLFNBQVMsS0FBSyxTQUFTLFNBQVMsTUFBTTtBQUNsRixZQUFJLGNBQWMsTUFBTSxPQUFPLE9BQUssTUFBTSxTQUFTLE9BQU8sRUFBRSxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsTUFBTSx3QkFBRyxLQUFLLFNBQVEsd0JBQUcsS0FBSyxNQUFLO0FBRXRILFlBQUksdUJBQU8sV0FBVyxZQUFZLG9DQUFvQyxLQUFLLFNBQVMsZUFBZTtBQUVuRyxvQkFBWSxRQUFRLENBQUMsTUFBTTtBQUMxQixjQUFJLE9BQU8sSUFBSSxVQUFVLFFBQVEsS0FBSztBQUN0QyxlQUFLLFNBQVMsQ0FBQztBQUFBLFFBQ2hCLENBQUM7QUFBQSxNQUNGO0FBQUEsSUFDRCxDQUFDO0FBR0QsU0FBSyxjQUFjLElBQUksdUJBQXVCLEtBQUssS0FBSyxJQUFJLENBQUM7QUFBQSxFQUM5RDtBQUFBLEVBRUEsV0FBVztBQUFBLEVBRVg7QUFBQSxFQUVBLE1BQU0sZUFBZTtBQUNwQixTQUFLLFdBQVcsT0FBTyxPQUFPLENBQUMsR0FBRyxrQkFBa0IsTUFBTSxLQUFLLFNBQVMsQ0FBQztBQUFBLEVBQzFFO0FBQUEsRUFFQSxNQUFNLGVBQWU7QUFDcEIsVUFBTSxLQUFLLFNBQVMsS0FBSyxRQUFRO0FBQUEsRUFDbEM7QUFDRDtBQUVBLElBQU0seUJBQU4sY0FBcUMsaUNBQWlCO0FBQUEsRUFHckQsWUFBWSxNQUFVLFFBQXNCO0FBQzNDLFVBQU0sTUFBSyxNQUFNO0FBQ2pCLFNBQUssU0FBUztBQUFBLEVBQ2Y7QUFBQSxFQUVBLFVBQWdCO0FBQ2YsVUFBTSxFQUFDLGdCQUFlO0FBRXRCLGdCQUFZLE1BQU07QUFFbEIsZ0JBQVksU0FBUyxNQUFNLEVBQUMsTUFBTSw2QkFBNEIsQ0FBQztBQUUvRCxRQUFJLHdCQUFRLFdBQVcsRUFDckIsUUFBUSx3QkFBd0IsRUFDaEMsUUFBUSxxQkFBcUIsRUFDN0IsUUFBUSxVQUFRLEtBQ2YsZUFBZSxNQUFNLEVBQ3JCLFNBQVMsS0FBSyxPQUFPLFNBQVMsUUFBUSxTQUFTLENBQUMsRUFDaEQsU0FBUyxPQUFPLFVBQVU7QUFDMUIsV0FBSyxPQUFPLFNBQVMsVUFBVSxTQUFTLEtBQUs7QUFDN0MsWUFBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLElBQ2hDLENBQUMsQ0FBQztBQUFBLEVBQ0w7QUFDRDsiLAogICJuYW1lcyI6IFtdCn0K
